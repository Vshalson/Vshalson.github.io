{"children":[{"children":[],"uri":"https://www.notion.so/137a6b453ec64300b025996c8e0ea4e2","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Container are Linux process."]]},{"children":[],"uri":"https://www.notion.so/e2dc1c40c30e4b0bac6cf47a91d6e1d7","type":"code","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["#Launching Redis contianer\ndocker run -d --name=db redis:alpine\n#Check  Process ID and Prent Process ID\ndocker top db\n# To list sub process use `Pstree`\npstree -c -p -A $(pgrep dockerd)"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/aed089c8c14146019c345a82c5c64328","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Configuration of each process define in /proc dir."]]},{"children":[],"uri":"https://www.notion.so/3ecd0d5d3c5b4f749643e01c9657ada9","type":"quote","color":"pink_background","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Give me process ID, I'll give you config dir.\n- /proc"]]},{"children":[],"uri":"https://www.notion.so/0bafcde6b77240d28984ded0cf98dacc","type":"code","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["DBPID=$(pgrep redis-server)\necho REDIS is $DBPID\n#here DBPID variable to get Process ID of running redis-server process\nls /proc\nAnd\nls /proc/$DBPID"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/2b6126de312143c38a069bb1696bac2e","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[]},{"children":[],"uri":"https://www.notion.so/e02da9729ff849b38def8eda46106761","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Namespaces",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/f695c7beb1a341bcba164290abab7e05","type":"bulleted_list","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Is to limit what process can see and access certain parts of system"]]},{"children":[{"children":[],"uri":"https://www.notion.so/fe853e6bb4af462ab8846a77855e5dfa","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["https://en.wikipedia.org/wiki/Linux_namespaces",[["a","https://en.wikipedia.org/wiki/Linux_namespaces"]]]]},{"children":[],"uri":"https://www.notion.so/5016b413cae74cf88ab7c5290000f6f8","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Available Namespace:"]]},{"children":[],"uri":"https://www.notion.so/3671b84852044a5b8d1c5e6578477f61","type":"bulleted_list","createdTime":1629571368549,"lastEditedTime":1629571368549,"title":[["Mount - mnt"]]},{"children":[],"uri":"https://www.notion.so/abf8f4795d724d1eb1c6d669607ac67a","type":"bulleted_list","createdTime":1629571368549,"lastEditedTime":1629571368549,"title":[["Network - net"]]},{"children":[],"uri":"https://www.notion.so/158d34b3643f40d4a39fbfec5ad21875","type":"bulleted_list","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Process ID - pid"]]},{"children":[],"uri":"https://www.notion.so/34137a38cc134aacae620d53f5f54a7c","type":"bulleted_list","createdTime":1629571368549,"lastEditedTime":1629571368549,"title":[["Control groups - cgroup"]]},{"children":[],"uri":"https://www.notion.so/b4b6be8d063e47e2bc3f0f20b3b4ba9f","type":"bulleted_list","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["UTS - hostnames"]]}],"uri":"https://www.notion.so/0854b198e1a547259c61d18f895e8ca0","type":"bulleted_list","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["When container started, Docker runtime will create new namespaces to sandbox the process. By running the process in it's own PID namespace."]]},{"children":[],"uri":"https://www.notion.so/44b54c8afa7f4450987464ef86ad57b8","type":"text","createdTime":1629571366152,"lastEditedTime":1629571366152,"title":[]},{"children":[{"children":[],"uri":"https://www.notion.so/9fd295f0d28b43c3a20102b6eeb63932","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Without using docker runtime, process can still have it's own namespace."]]},{"children":[],"uri":"https://www.notion.so/551f41e5a0a84723bcc8a71a41886fb4","type":"code","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["unshare --help"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/00935fefa845424d86c7fa207b8b37ab","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Aha, run bash prompt process seprately"]]},{"children":[],"uri":"https://www.notion.so/44b56abd4c164329b640a0f3c06bc8a8","type":"code","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["sudo unshare --fork --pid --mount-prac bash\nps\n.. continue experimenting your shit\nexit"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/69e9d5f0ae8b41fab8c21ebb9333e502","type":"text","createdTime":1629571366152,"lastEditedTime":1629571366152,"title":[["Unshare  : to launch \"contained process\", unshared from parent",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/65832cab54c84440a7b34508aca7e6bf","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["What happens when we share a namespace?"]]},{"children":[],"uri":"https://www.notion.so/310551009fab44019435f27c6aa594f4","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["It allows for process to reused the same namespace,allow to view and interact."]]},{"children":[],"uri":"https://www.notion.so/018fd656401042f6a02ed54863be8051","type":"image","createdTime":1629571366148,"lastEditedTime":1629571366148,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2dcb17ac-42b2-4b4b-b662-73e1f8fac683%2FUntitled.png?width=658&table=block&id=018fd656-4010-42f6-a02e-d54863be8051","caption":[],"width":658,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.29027355623100304,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/a80fa3a8219d4c1786c4812913af8bb1","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["NSEnter",[["b",null]]],[" : to attach process to existing Namespace (used for debugging)"]]},{"children":[],"uri":"https://www.notion.so/f1387ea2fc90418e9b6381deb8a1caf6","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["nsenter --target $DBPID --mount --uts --ipc --net --pid ps aux\n# target process "]],"language":"Bash","wrap":false},{"children":[{"children":[],"uri":"https://www.notion.so/ecacb24f032f4fe08df1cf27dc60e604","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Connect ngix to DB namespace"]]},{"children":[],"uri":"https://www.notion.so/29c60a65de774bb395758e6413779bc4","type":"image","createdTime":1629571368551,"lastEditedTime":1629571368551,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb3058904-70a3-44d3-b3b1-5ee34695baec%2FUntitled.png?width=659&table=block&id=29c60a65-de77-4bb3-9575-8e6413779bc4","caption":[],"width":659,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.15781487101669195,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/eae24e4c0ad640c1b6937e64815f1495","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Make variable, WEBPID "],["WEBPID=$(pgre nginx | tail -n1)",[["c",null]]]]},{"children":[],"uri":"https://www.notion.so/050a8681f1064b6085199327a06626ea","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Namespace for both process points to same location."]]}],"uri":"https://www.notion.so/da6425b4ab2b4416a7a71f6305938f35","type":"text","createdTime":1629571366152,"lastEditedTime":1629571366152,"title":[["Using Docker, we can share namespaces "],["container:<container_name>",[["c",null]]],["    "]]},{"children":[],"uri":"https://www.notion.so/9dc07638c2734afbac16e90fc459aa60","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[]},{"children":[],"uri":"https://www.notion.so/1fae1911bfa64371acd54aeff0ef53b0","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Control groups (Cgroups) : limit amout of resources a process can consume."]]},{"children":[],"uri":"https://www.notion.so/3f12fd0791a0457f996ea39cf8bb24b7","type":"code","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["# CHeck cgroup mapping\ncat /proc/$DBPID/cgroup\n# Check CPU stats for process\ncat /sys/fs/cgroup/cpu,cpuacct/docker/$DBID/cpuacct.stat\n# CHeck CPU share limit\ncat /sys/fs/cgroup/cpu,cpuacct/docker/$DBID/cpuacct.shares\n\nDcoker Cgroup stored @ /sys/fs/cgroup/memory/docker/"]],"language":"Bash","wrap":false},{"children":[{"children":[],"uri":"https://www.notion.so/68075f26d02c46a88290bdb0585e9d46","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["By default, container have no limit on memory."]]},{"children":[],"uri":"https://www.notion.so/aee911c9a8724fe696cc5a39aa0448aa","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["docker stats <container_name> --no-stream"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/b211d2efea1e4e8189d217031d5e96e3","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["To set limits,"]]},{"children":[],"uri":"https://www.notion.so/ef671e69e61e44b69c3190f1596b5f80","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["echo 8000000 > /sys/fs/cgroup/memory/docker/$DBID/memory.limit_in_bytes\nHere 8000000 in bytes to 7.629 mibibyte"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/214ed40354564463b7001da9ee30a2d4","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Docker can control memory limits via Cgroup settings."]]},{"children":[],"uri":"https://www.notion.so/8b24886c2ddb4a9b8175c100061c235a","type":"image","createdTime":1629571366151,"lastEditedTime":1629571366151,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F81178178-b50e-4e74-bea7-9758e0440277%2FUntitled.png?width=1222&table=block&id=8b24886c-2ddb-4a9b-8175-c100061c235a","caption":[],"width":1222,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.18330605564648117,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/a30f8c1d5ab048a3ac2cc4ebdee596ec","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[]},{"children":[],"uri":"https://www.notion.so/89456f5c27594776ac8dd2eac66783a3","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[]},{"children":[{"children":[],"uri":"https://www.notion.so/1ceb27f3ccae4ae7b6de8e82e4d0b503","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["All actions with Linux done via syscalls."]]},{"children":[],"uri":"https://www.notion.so/fcc99cf795934cdc98deb56c02b2da3d","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Kernel has 330 syscalls to perform operations."]]},{"children":[],"uri":"https://www.notion.so/01ee8dcd71f341579d63c49fcf581eee","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["All applications use combination of syscalls to perform required operatn."]]},{"children":[],"uri":"https://www.notion.so/514c98d3b64d43b8891e69b774174785","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["AppArmor is a application defined profile that describes which parts of the system a process can access.",[["b",null]]]]}],"uri":"https://www.notion.so/5825feae146a40dfb7773b67caa4b5e8","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["AppArmor",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/18e9daef22c049f693bc513115c25aaf","type":"divider","createdTime":1629571366151,"lastEditedTime":1629571366151},{"children":[],"uri":"https://www.notion.so/b78d7a2679f44124963e7ebfee7ac01b","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[]},{"children":[],"uri":"https://www.notion.so/2fea64fca4ac4b778cf77857ee776d97","type":"heading","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Scenario : 2"]],"depth":2},{"children":[],"uri":"https://www.notion.so/2d410498950947fc954db21fb236a50f","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Container image: container image is tar file containing tar files. Each tar file is layer. Once all tar file extract into same location then you have container's filesystem."]]},{"children":[],"uri":"https://www.notion.so/1eb96055908d4756a53e53c95b211283","type":"image","createdTime":1629571366151,"lastEditedTime":1629571366151,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Feed561f9-77bb-40b1-a924-87c2e7e233ca%2FUntitled.png?width=781&table=block&id=1eb96055-908d-4756-a53e-53c95b211283","caption":[],"width":781,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.9487836107554417,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/c11da411889e4d36b814aa196ab5f2d8","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Image also includes meta deta about version info and tag name."]]},{"children":[],"uri":"https://www.notion.so/b5b96df8600b4145a4a7e0b8714d98ab","type":"image","createdTime":1629571366148,"lastEditedTime":1629571366148,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7e70f63f-82b4-4e03-ad13-fed77eb792be%2FUntitled.png?width=747&table=block&id=b5b96df8-600b-4145-a4a7-e0b8714d98ab","caption":[],"width":747,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.34805890227576974,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/5393c8c2170242e3a78c3c1c660705a8","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["And extract it further,"]]},{"children":[],"uri":"https://www.notion.so/e761d63d52004d25a76e212f1d6e6a29","type":"image","createdTime":1629571366148,"lastEditedTime":1629571366148,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcfaef57e-3ad0-402f-807c-e2526adf0e3e%2FUntitled.png?width=819&table=block&id=e761d63d-5200-4d25-a76e-212f1d6e6a29","caption":[],"width":819,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.33455433455433453,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/bf672862b9b24c4b8153303185a13423","type":"divider","createdTime":1629571366151,"lastEditedTime":1629571366151},{"children":[],"uri":"https://www.notion.so/d819209c461b48288e112c309e9f40bb","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[]},{"children":[{"children":[],"uri":"https://www.notion.so/373805f0e75843eea1d831e1ffda9144","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Import tar file to create an image from scratch."]]},{"children":[],"uri":"https://www.notion.so/85a1f379049a4dc982fc3f6081a457f5","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Here busybox (package with standard unix programs) as base."]]}],"uri":"https://www.notion.so/f75275b20d8a4980ac1526cb1d1f0504","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Create image with dockerfile",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/c6ad4ab7768a4dc792c071bf2bb8f766","type":"code","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["# Download and extract busybox rootfs\ncurl -LO https://raw.githubusercontent.com/moby/moby/a575b0b1384b2ba89b79cbd7e770fbeb616758b3/contrib/mkimage/busybox-static && chmod +x busybox-static\n# To download rootfs and main binaries \n./busybox-static busybox\n# create a file\necho KatacodaPrivateBuild > busybox/release\n# dir can into tar and import into docker as an image.\ntar -C busybox -c . | docker import - busybox\n# launch as container, here to print release\ndocker run busybox cat /release"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/412dfc34d2de45d99b546d161e891670","type":"divider","createdTime":1629571366146,"lastEditedTime":1629571366146},{"children":[],"uri":"https://www.notion.so/9a3f3cfab0b645efa6ff779b6909dcbc","type":"heading","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Docker foundations"]],"depth":1},{"children":[],"uri":"https://www.notion.so/5bd086118c8b495682c44673580bce5a","type":"heading","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Deploy first Docker Container"]],"depth":3},{"children":[],"uri":"https://www.notion.so/1ce6d9d26f9843389723d01b2a7ee882","type":"code","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["# search docker image\ndocker search redis\n\n# Run command in foreground\ndocker run -d redis\n555555"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/6a072856e7a34c09b1c9b16e29a3d922","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[]},{"children":[],"uri":"https://www.notion.so/72bf42378a95463cb48968c27223ec89","type":"heading","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Deploy Static HTML Website as Container"]],"depth":2},{"children":[{"children":[],"uri":"https://www.notion.so/74a01e6f877443458033b7280aa35801","type":"bulleted_list","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Docker Images start from a base image."]]},{"children":[],"uri":"https://www.notion.so/8526efcd3a174f0096b8d6fec3527c6f","type":"bulleted_list","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Base image is defined as instruction in Dockerfile."]]}],"uri":"https://www.notion.so/077b94a5647443f49533020efd12acbc","type":"bulleted_list","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Create Dockerfile"]]},{"children":[{"children":[],"uri":"https://www.notion.so/254c61bb674a471da884239f9ee38e88","type":"bulleted_list","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Build command takes in some diff parameters."]]},{"children":[],"uri":"https://www.notion.so/1549f236425c4ba2bc94c0b1baf9bd84","type":"code","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["# Build our static HTML\ndocker build -t webserver-image:v1 ."]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/1fbf017bbea840668d4ad246b8e56d27","type":"bulleted_list","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Build Docker Image"]]},{"children":[{"children":[],"uri":"https://www.notion.so/5f7a71681384499baa9e50feeb137ae1","type":"bulleted_list","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["When container launches, it's sandboxed from other processes and networks on the host."]]},{"children":[],"uri":"https://www.notion.so/c3a7d0dff37b44609b481334d5afe4aa","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["docker run -d -p 80:80 webserver-image:v1\n\t-d : run in background\n\t-p : bind port"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/3e880d40d069477781879c683422e700","type":"bulleted_list","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Run "]]},{"children":[],"uri":"https://www.notion.so/7d661fe351ae4c969fc46e58090293cf","type":"divider","createdTime":1629571366145,"lastEditedTime":1629571366145},{"children":[],"uri":"https://www.notion.so/e2712b828c6b4e6392ee4f5055b5d0f1","type":"heading","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Optimise Dockerfile with OnBuild"]],"depth":3},{"children":[],"uri":"https://www.notion.so/caab341501ff48798af47f97d4e4b342","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Dockerfile executes in order from top to bottom, one can trigger instruction to execute later time when image is used as base for another image."]]},{"children":[],"uri":"https://www.notion.so/20249428d05b4221ba91a66d5cc43ffe","type":"image","createdTime":1629571366144,"lastEditedTime":1629571366144,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F13addfcf-0d6c-4527-9521-c10f91565282%2FUntitled.png?width=582&table=block&id=20249428-d05b-4221-ba91-a66d5cc43ffe","caption":[],"width":582,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.570446735395189,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/af5666533bb04e948cd1a0d696072ce2","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["(Image Source: "],["https://katacoda.com/courses/docker/4",[["a","https://katacoda.com/courses/docker/4"]]],[" )"]]},{"children":[],"uri":"https://www.notion.so/0a5c1aeeb2e44dda81a95029f98e04e6","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Application Dockerfile"]]},{"children":[],"uri":"https://www.notion.so/e76b98f47d3e4a0ab2e0974cdc6bb2bc","type":"image","createdTime":1629571366151,"lastEditedTime":1629571366151,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8f352165-c254-4c7f-a384-a42cc70de843%2FUntitled.png?width=592&table=block&id=e76b98f4-7d3e-4a0a-b2e0-974cdc6bb2bc","caption":[],"width":592,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.28885135135135137,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/f31807da1e7d41dab092676215dea3df","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[]},{"children":[],"uri":"https://www.notion.so/c077a4445bcd40a0a88cac6dc2b77aa8","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Just like we have .gitignore, to prevent files or dir from include by mistake in images."]]},{"children":[],"uri":"https://www.notion.so/7bd0a2af4c3049ec91d5a208d927b6bd","type":"quote","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["If you need to use the passwords as part of a "],["RUN",[["b",null]]],[" command then you need to copy, execute and delete the files as part of "],["a single RUN command",[["b",null]]],[". Only the final state of the Docker container is persisted inside the image."]]},{"children":[],"uri":"https://www.notion.so/e7b20eedd5564901800faf44e109832a","type":"divider","createdTime":1629571366151,"lastEditedTime":1629571366151},{"children":[],"uri":"https://www.notion.so/5217ededcae24d67aab6323c092ab7a8","type":"heading","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Data container"]],"depth":2},{"children":[],"uri":"https://www.notion.so/1270b7e536c345f099f6c57e881e34f3","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Responsible to be place to store or manage data."]]},{"children":[],"uri":"https://www.notion.so/220573a2bff44a1d9df5a5fd147504c8","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["It's managed by host system but don't run on "],["docker ps",[["c",null]]]]},{"children":[],"uri":"https://www.notion.so/d8bf4a397c534d6b941f640cfe9e3889","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Scenario: "]]},{"children":[],"uri":"https://www.notion.so/2077ef0a928244779a9671e1b6c23b87","type":"code","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["# Create data container for storing config files using\ndocker create -v /config --name dataContainer busybox\n\n# COpy file using cp, here copy config.conf to dataContainer\ndocker cp config.conf dataContainer:/config/\n\n# Mount using --volumes-from\ndocker run --volumes-from dataContainer ubuntu ls /config\n\n# Export/Import Containers, move to another machine\ndocker export dataContainer > dataContainer.tar\ndocker import dataContainer.tar"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/d462920d2ff745848dcb0d69220d9649","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Here, DataContainer has our config file, we reference the container when we launch depended container here ubuntu one."]]},{"children":[],"uri":"https://www.notion.so/80aa7008514e418aa7a0a840d79f70bf","type":"heading","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Communicating between Containers"]],"depth":2},{"children":[],"uri":"https://www.notion.so/d1c42a435c7846b6b6714abe5e69d291","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Define friendly name container you're connecting to."]]},{"children":[],"uri":"https://www.notion.so/745e7ce0d4bf4eafac48cb09b0e4db51","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Scenario:"]]},{"children":[{"children":[],"uri":"https://www.notion.so/48d85c49d9b94a04add95df73cf03454","type":"code","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["docker run -d --name redis-server redis"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/d1a291a6c5804758afc453820389d871","type":"bulleted_list","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Start Data store with friendly name"]]},{"children":[{"children":[],"uri":"https://www.notion.so/ba1adeba1c274902b6015f955ae5e2fb","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["The link updates /etc/hosts and environment variables to allow containers to discover and communicate"]]},{"children":[],"uri":"https://www.notion.so/fc0c1804f9b2471989308592a7cbb514","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["# output env variable with env command\ndocker run --link redis-server:redis alpine env\n\n# It will update HOSTS file wiht entry for source container for source container with three names, the **original**, the **alias** and **hash-id.**\n# output container host entry\ndocker run --link redis-server:redis alpine cat /etc/hostss"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/9f2341f880ea452ab7ddbd4236142989","type":"bulleted_list","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["When link created, Docker will do"]]},{"children":[],"uri":"https://www.notion.so/81e48c16c7134cdd840070f97d5411e4","type":"bulleted_list","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Connect to App, applications can connect and communicate with source container in usual way."]]},{"children":[],"uri":"https://www.notion.so/9969c257fea1407e9013f9f151da1686","type":"code","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["docker run -d -p 3000:3000 --link redis-server:redis katacoda/redis-node-docker-example"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/d0f2175425ae47b5a24c12d512c2aaf2","type":"heading","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Docker network"]],"depth":2},{"children":[],"uri":"https://www.notion.so/dce847a56e6d49a08dfe02f9178133a7","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Similar to physical network, allow container to come and go more freely than using links."]]},{"children":[{"children":[],"uri":"https://www.notion.so/1ec38b5dadf1438c8ae58d981b0fa1d9","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Network allow us to attach multiple containers which able to discover each other."]]},{"children":[],"uri":"https://www.notion.so/545ba46ac07c447482983295ede7e1f2","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["# create network with predefined name\ndocker network create backend-network\n\n# launch new container, --net flag to assign network\ndocker run -d --name=redis --net=backend-network redis"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/e1ca4e93274949dfa67af1422bfac059","type":"bulleted_list","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Create Network"]]},{"children":[{"children":[],"uri":"https://www.notion.so/9aaf4640496948f382a27f03845abc15","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Here Docker not assigns env variables or updates host file of containers."]]},{"children":[],"uri":"https://www.notion.so/a414d3652e5b4ba6b91b3ee10b06b95b","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["Instead, container communicate via Embedded DNS server in Docker. DNS assign to all container via IP 127.0.0.11 and set "],["resolve.conf",[["c",null]]],[" file."]]},{"children":[],"uri":"https://www.notion.so/7c9875c7e03e486495cb4354e1fc41d2","type":"text","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["When containers try access other container via well-known name, as Redis, DNS server will return IP addr of correct container."]]},{"children":[],"uri":"https://www.notion.so/d99d76d253a245ae8ee13d3374484b21","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["docker run --net=backend-network alpine ping -c1 redis"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/3154b98309a04174a41497b718727e4f","type":"bulleted_list","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Network Communication"]]},{"children":[{"children":[],"uri":"https://www.notion.so/2093e449dc42466b9d5e20b3f4ca776f","type":"text","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["Docker supports multiple network and container being attached to more than one network at same time."]]},{"children":[],"uri":"https://www.notion.so/e594960fe56244aabbcb3d66d4210610","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["# create network\ndocker network create frontend-network\n\n# connect command to attach existing container\ndocker network connect frontend-network redis\n\n# launch web-server, it'll communicate with redis instance\ndocker run -d -p 3000:3000 --net=frontend-network katacoda/redis-node-docker-example"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/859d9c5a23c2491fa0057d5a1730865d","type":"bulleted_list","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Connect Two containers"]]},{"children":[{"children":[],"uri":"https://www.notion.so/dec1a727cba840fba45eb86da1725cbc","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["# list networks on host\ndocker network ls\n\n# explore network to see containers attach and their IP addr\ndocker network inspect frontend-network\n\n# disconnect redis container from frontend-network\ndocker network disconnect frontend-network redis"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/cc28d3d9821547f7a2d5c1e05fedb900","type":"bulleted_list","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Disconnect Container"]]},{"children":[],"uri":"https://www.notion.so/9d1796c91a92453484a0dd4fe13c4f4a","type":"divider","createdTime":1629571366148,"lastEditedTime":1629571366148},{"children":[],"uri":"https://www.notion.so/d69e95a3a21442f3b6546c4defa8dcc9","type":"heading","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Persisting Data using Volumes"]],"depth":2},{"children":[],"uri":"https://www.notion.so/f69527ca791f47f68ddaf062e22868b0","type":"code","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["# Starting redis container, -v : create data volume.\ndocker run -v /docker/redis-data:/data --name r1 -d redis \\\n\tredis-server --appendonly yes\n\n# Pipe data into redis instance using \ncat data | docker exec -i r1 redis-cli --pipe\n\n# Same dir can be mounted to second container, here for backup operation\ndocker run -v /docker/redis-data:/backup ubuntu ls /backup\n\n# --volumes-from : maps the mapped volume from source to container being launched\ndocker run --volumes-from r1 -it ubuntu ls /data\n\n# Mounting container can be prone to write, here specify read-only `:ro`\ndocker run -v /docker/redis-data:/data:ro -it ubuntu rm -rf /data"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/209e5c46ba0e42baaaa133723c192749","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[]},{"children":[],"uri":"https://www.notion.so/730ea8107c2947199c539a36277e8228","type":"heading","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Managing Log Files"]],"depth":2},{"children":[],"uri":"https://www.notion.so/f67c9d8e44534a3d82d14a1262233c21","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Docker will track standard out and standard error output"]]},{"children":[],"uri":"https://www.notion.so/efcbda3666674f078b5022b4f053e2f9","type":"code","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["# to retrieve logs\ndocker logs redis-server"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/7bb99e021a3c4bdbb39e222709179c5c","type":"callout","color":"blue_background","createdTime":1629571366145,"lastEditedTime":1629571366145,"icon":"🧭","title":[["syslog is a widely used standard for message logging. It permits separation of the software that generates messages, the system that stores them, and the software that reports and analyses them"]]},{"children":[],"uri":"https://www.notion.so/0c27de436fc04bd5807a9d3acedc912d","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["# command to redirect redis logs to syslog\ndocker run -d --name redis-syslog --log-driver=syslog redis\n\n# Docker inspect to identify logging config for particular container\n$ docker inspect --format '{{ .HostConfig.LogConfig }}' redis-server\n{json-file map[]}\n$ docker inspect --format '{{ .HostConfig.LogConfig }}' redis-syslog\n{syslog map[]}"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/39ba7e8b0d3f4efab474fac10a31224b","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[]},{"children":[],"uri":"https://www.notion.so/923f43faaf7440049149302c918ce68c","type":"heading","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Ensuring Uptime"]],"depth":2},{"children":[],"uri":"https://www.notion.so/e572e113313049159228dd2860ec6177","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Docker consider containers to exit with non-zero exit code as crashed, default crash container remain stopped."]]},{"children":[],"uri":"https://www.notion.so/d78965c5727644fbbc5e3a233c7c86a0","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Here we evaulate log, to diagnose the issue."]]},{"children":[],"uri":"https://www.notion.so/d1f117aeed88456080128ed604d70596","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Flag "],["--restart=on-failure:#",[["c",null]]],[" allows you to say how many times Docker should try again."]]},{"children":[],"uri":"https://www.notion.so/b31d6d41e62b4735bd0bc917122eb10e","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["--restart=always",[["c",null]]],[" flag to automatically restart the container when is crashes"]]},{"children":[],"uri":"https://www.notion.so/4fd325270aca48249b403d4a12fdf576","type":"image","createdTime":1629571366146,"lastEditedTime":1629571366146,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff4c50a83-ca42-472b-814e-c0e2e15828bc%2FUntitled.png?width=947&table=block&id=4fd32527-0aca-4824-9b40-3d4a12fdf576","caption":[],"width":947,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.3812038014783527,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/da8fc8c695ce445aa80cda2099500c01","type":"image","createdTime":1629571366146,"lastEditedTime":1629571366146,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff927e055-0ed6-4264-9045-1e831aa1dedd%2FUntitled.png?width=951&table=block&id=da8fc8c6-95ce-445a-a80c-da2099500c01","caption":[],"width":951,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.3186119873817035,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/600b6787ef874adfa1617ba1fc292691","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[]},{"children":[],"uri":"https://www.notion.so/07f9899e01914f35b1711fb61560df59","type":"heading","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Docker Metadata & Labels"]],"depth":2},{"children":[],"uri":"https://www.notion.so/c980376136534e489d7409b0e3e40de8","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["For containers in production, it's helpful to add metadata related to container like version details, who owns it or criteria which server they shud run on."]]},{"children":[],"uri":"https://www.notion.so/3cc3f7e0bb724ea9bc05687d723a2422","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Additional data managed via Docker Labels, it allows us to define custom metadata about container or image which inspected or used as part of filter."]]},{"children":[{"children":[],"uri":"https://www.notion.so/f93546d80ec24de8bcaf97f557745e8c","type":"code","createdTime":1629571368550,"lastEditedTime":1629571368550,"title":[["docker run -l user=12345 -d redis"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/31496c6f17a64efc9fca7efbff3f2d48","type":"bulleted_list","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Single Label : "],["l=<value>",[["c",null]]]]},{"children":[{"children":[],"uri":"https://www.notion.so/c8d8274f5c9e4657bc48379ab18ff4be","type":"code","createdTime":1629571368551,"lastEditedTime":1629571368551,"title":[["# one label for user and second for role\necho 'user=12345` >> labels && echo 'role=cache' >> labels\n# --labels-file=labels\ndocker run --label-file=labels -d redis"]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/ef7f4f61592d40e490f340a2fe1f6235","type":"bulleted_list","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["External File : while adding multiple labels, add through external file"]]},{"children":[],"uri":"https://www.notion.so/d338daebec9e45bd9ac0dd1d3fd93577","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["In case of Dockerfile,",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/ef4c36117e754d898ef08daaa00dcaeb","type":"image","createdTime":1629571366148,"lastEditedTime":1629571366148,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9516fd26-c777-47c9-9a19-2aae5e1b7e49%2FUntitled.png?width=597&table=block&id=ef4c3611-7e75-4d89-8ef0-8daaa00dcaeb","caption":[],"width":597,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.6381909547738693,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/7cdda0c8efd94f528414c43596399393","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["To view labels of container or image, use inspect"]]},{"children":[],"uri":"https://www.notion.so/74e8bb76ad854b9897e8378bccf5fdb6","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["docker inspect <container_name/image_name>"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/d510c7da562c4ba9a7822f929b1dd894","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Daemon Labels",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/bfbc6382890841f196ee5c0b92eeb22d","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["When launch instance of daemon, assign label to identify how it should be used."]]},{"children":[],"uri":"https://www.notion.so/2cf08143d224419a8cb1cde2d468d7dc","type":"code","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["docker -d -H unix:///var/rn/docker.sock \\\n\t--label com.katacoda.environment=\"production\""]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/dfc0b110e8fe4bfa9a458336085148fb","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[]},{"children":[],"uri":"https://www.notion.so/cb97f39c157b4be195fb781fd29e4a5d","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[]},{"children":[],"uri":"https://www.notion.so/89b4d6612f234a39a4b0f88e050c9d2c","type":"heading","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Load Balancing Containers"]],"depth":2},{"children":[],"uri":"https://www.notion.so/028ba589189b470292671b7d1047d34f","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Here, we use the NGINX web server to load balance requests between two containers running on the host"]]},{"children":[],"uri":"https://www.notion.so/07493688e9d64265ba9b0a585b8140f1","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["The Service Discovery pattern is where the application uses a third party system to identify the location of the target service. For example, if our application wanted to talk to a database, it would first ask an API what the IP address of the database is."]]},{"children":[],"uri":"https://www.notion.so/d6f2a81ec2694e7f82568f1aca193a10","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Step 1 - NGINX Proxy",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/ea96eebbf830402aaa29db303382e3ba","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Nginx service running → dynamically discovery and update load balance configuration when new containers loaded."]]},{"children":[],"uri":"https://www.notion.so/895540c2ab564dbb80176862a4516497","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Properties -",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/8465f2cd6c4c4188b56038585ead32f5","type":"bulleted_list","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["First Port binding : here -p 80:80"]]},{"children":[],"uri":"https://www.notion.so/b51de81b149f462087e6302d858b01b6","type":"bulleted_list","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Second mount docker.sock file, it's connection to docker daemon running on host; -v /var/run/docker.sock:/tmp/docker.sock:ro "]]},{"children":[],"uri":"https://www.notion.so/26421a6638734fd5866afdc851f28a75","type":"bulleted_list","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Third if request comes and it doesn't make to specified host, then this default container will handle request : -e DEFAULTHOST=<domain>"]]},{"children":[],"uri":"https://www.notion.so/947909a7c93642b3a93b62127c8a508a","type":"code","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["docker run -d -p 80:80 -e DEFAULT_HOST=proxy.example -v /var/run/docker.sock:/tmp/docker.sock:ro --name nginx jwilder/nginx-proxy"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/b3c2bfde0fbc42edb54acf66d6eb2c3a","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Step 2 - Launch Contianer",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/e4222adf6f0b41b7b0d9f887d849d62b","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Specify VIRTUAL_HOST env variable, to define the domain where requests will come from and should be handled by container."]]},{"children":[],"uri":"https://www.notion.so/549192cab2d24cd09c97e3db410dbe48","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["docker run -d -p 80 -e VIRTUAL_HOST=proxy.example katacoda/docker-http-server"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/ba0bea935dc84db18f283ab01f80b0fa","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Step 3 - Cluster",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/1c19ea1a46694bedbe9a96e4f9f5c1ce","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Launch second container on same Vhost, after nginx-proxy configure the system in round-robin load balance (the first request will go to one container, the second request to a second container and then repeat in a circle)."]]},{"children":[],"uri":"https://www.notion.so/786f8db43f0045dbbf93bba38da16ab7","type":"code","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["# second container\ndocker run -d -p 80 -e VIRTUAL_HOST=proxy.example katacoda/docker-http-server"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/b084b2ac4668489ba1bddbc86d0afcb2","type":"text","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Step 4 - Auto generated NGINX config",[["b",null]]]]},{"children":[],"uri":"https://www.notion.so/1b2b146815044b7bb9d29f824773c52d","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Nginx-proxy auto create and configs nginx, to check final config file."]]},{"children":[],"uri":"https://www.notion.so/1604b36b6a09436d9a0f2b4e5f04292c","type":"code","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["docker exec nginx cat /etc/nginx/conf.d/default.conf"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/4024d2bbec124d72be9c89f9b9b1e031","type":"image","createdTime":1629571366145,"lastEditedTime":1629571366145,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Faacc0288-078a-41a9-90a1-890bc0ce5adb%2FUntitled.png?width=1216&table=block&id=4024d2bb-ec12-4d72-be9c-89f9b9b1e031","caption":[],"width":1216,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.2837171052631579,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/c0b7c8f3a6aa4a6ea3ada2a6f85832b4","type":"divider","createdTime":1629571366144,"lastEditedTime":1629571366144},{"children":[],"uri":"https://www.notion.so/93fe7e0a12344ecdbddf352009eede2e","type":"heading","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Docker-Compose"]],"depth":2},{"children":[],"uri":"https://www.notion.so/6cee4c5633d8494487cbfbbc4e87da41","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["# to see details of launched container\ndocker-compose ps\n\n# access logs via stream\ndocker-compose logs\n\n# scale the number of web containers, following will scale no of web container\ndocker-compose scale web=3 \n# scale down back to one\ndocker-compose scale web=1\n\n# docker stop\ndocker-compose stop"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/38e610882a964df380111f8c93176508","type":"heading","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Docker stats"]],"depth":2},{"children":[],"uri":"https://www.notion.so/3d4adc2fa615414facd8846d5ad3938a","type":"code","createdTime":1629571366152,"lastEditedTime":1629571366152,"title":[["# For single container\ndocker stats nginx\n\n# For multiple container\ndocker ps -q | xargs docker stats"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/3101dfcba6a740abb1308940155aa087","type":"heading","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Formatting Docker ps output"]],"depth":2},{"children":[],"uri":"https://www.notion.so/c9c1a4e50c1749d48c2559be9d433592","type":"image","createdTime":1629571366150,"lastEditedTime":1629571366150,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8c56ecbe-414b-4340-a94f-4303e935a49f%2FUntitled.png?width=1245&table=block&id=c9c1a4e5-0c17-49d4-8c25-59be9d433592","caption":[],"width":1245,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.1823293172690763,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/75c68712e8d349e286b054753978c26c","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Here, docker ps output name, image used, command, uptime and port info."]]},{"children":[],"uri":"https://www.notion.so/6d27d334fad54aebaa56f52d3aa618ab","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["To limit column displayed, —format '_pattern'"]]},{"children":[],"uri":"https://www.notion.so/276406b5bcad43c8bcc26e12c25d7fa4","type":"bulleted_list","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Print name and Image"]]},{"children":[],"uri":"https://www.notion.so/026f06b1021c40fd9f715b13b3a54c6b","type":"code","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["# print in single line\ndocker ps --format '{{.Name}} container is using {{.Imgae}} image'\n# print in table format\ndocker ps --format 'table {{.Name}}\\t{{.Image}}'\n\n# print all ip addr for running container\ndocker ps -q | xargs docker inspect --format '{{ .Id }} - {{ .Name }} - {{ .NetworkSettings.IPAddress }}'"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/3f6d1375b3094f538940a9ddde898183","type":"image","createdTime":1629571366151,"lastEditedTime":1629571366151,"source":"https://www.notion.so/signed/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbe90bbee-775e-4f6d-a2be-aa8b01726110%2FUntitled.png?width=984&table=block&id=3f6d1375-b309-4f53-8940-a9ddde898183","caption":[],"width":984,"height":-1,"fullWidth":false,"pageWidth":true,"aspectRatio":0.8099593495934959,"preserveScale":true},{"children":[],"uri":"https://www.notion.so/97d1f361a462495fb80ac25142f4d27f","type":"text","createdTime":1629571366147,"lastEditedTime":1629571366147,"title":[["(source : "],["https://docs.docker.com/engine/reference/commandline/ps/",[["a","https://docs.docker.com/engine/reference/commandline/ps/"]]],[" )"]]},{"children":[],"uri":"https://www.notion.so/fc8ebd503de54b14a9d83e4569614f62","type":"text","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[]},{"children":[],"uri":"https://www.notion.so/0ab9ad68f56b40b0a0fd2f13512d9a97","type":"heading","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Rootless Docker"]],"depth":2},{"children":[],"uri":"https://www.notion.so/36284d67cbb040b39d7f7b9042c6060f","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Rootless Docker is a project from Docker that removes the requirement for the Docker Daemon to be started by a root. This creates a more secure environment."]]},{"children":[],"uri":"https://www.notion.so/513fed3f514b49f0b0c803b596d1d33d","type":"heading","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["Swarm mode"]],"depth":1},{"children":[],"uri":"https://www.notion.so/63f028684e6941188866b6ffd960778a","type":"text","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["It enables ability to deploy container across multiple Docker hosts, using overlay network for service discovery with build-in load balancer."]]},{"children":[],"uri":"https://www.notion.so/9b7e0d45c8694054bade673fd7328b59","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Concepts :"]]},{"children":[],"uri":"https://www.notion.so/6614de7fbe6c481f9b0f745b0502e3e3","type":"bulleted_list","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Node ",[["b",null]]],[": instance of docker engine connected to swarm. Nodes are either workers or managers. Manager schedule which container to run where and workers execute the task."]]},{"children":[],"uri":"https://www.notion.so/d2401ff197274555aa8f7b286321a21a","type":"bulleted_list","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Services ",[["b",null]]],[": collection of tasks executed by workers."]]},{"children":[],"uri":"https://www.notion.so/7ae5214cc01d4cc9b67f2509c1e93955","type":"bulleted_list","createdTime":1629571366151,"lastEditedTime":1629571366151,"title":[["Load balancing",[["b",null]]],[" : load balancer to process requests across all container in service.  "]]},{"children":[],"uri":"https://www.notion.so/297cab0f6a024d01a26fe62c0b7eb505","type":"heading","createdTime":1629571366152,"lastEditedTime":1629571366152,"title":[["Step 1: Initialise Swarm mode"]],"depth":3},{"children":[],"uri":"https://www.notion.so/77cfdefb4a934e648d0deb9adb7c1efa","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["After it Docker becomes manages by default, i.e. first node to initialize. New nodes join the cluster, they adjust their role between manager and workers."]]},{"children":[],"uri":"https://www.notion.so/2bc1f5f8ae324f4a859fb66a4baa4a6c","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["# Initialise Swarm mode, it'll output init token which used to add additional nodes.\ndocker swarm init"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/3ecb93b705764f3cb9e2ae2303e2c91f","type":"heading","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Step 2: Join Cluster"]],"depth":3},{"children":[],"uri":"https://www.notion.so/8979c6020ed348f89d6a5d64125e02bf","type":"text","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["Joining is done by pointing other host to current manager of cluster."]]},{"children":[],"uri":"https://www.notion.so/e080871b12184cff8ec0bba1b0f6854c","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Docker uses port 2377 for swarm managing."]]},{"children":[],"uri":"https://www.notion.so/5d015c85bab0401ab6d62d9b5b420d23","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["On second host,"]]},{"children":[],"uri":"https://www.notion.so/44d30657d8ed4ea0bd795b217a8bff9e","type":"code","createdTime":1629571366146,"lastEditedTime":1629571366146,"title":[["# first task to obtain token is to add worker to cluster\n# here we ask manager what's the token via `swarm join-token`\ntoken=$(ssh -o StrictHostKeyChecking=no 172.17.0.77 \"docker swarm join-token -q worker\") && echo $token\n# join the requesting access\ndocker swarm join 172.17.0.77:2377 --token $token\n# view nodes in cluster\ndocker node ls"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/10a417c9c7384ad5b7cae3eada40f8f4","type":"heading","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Step 3: Create overlay network"]],"depth":3},{"children":[],"uri":"https://www.notion.so/dab689690975486c9650ec2c410c1efd","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["The overlay network used to enable containers on diff hosts to communicate, this is Virtual Extensible LAN (VXLAN)"]]},{"children":[],"uri":"https://www.notion.so/e84be9dea97b45298a649a6be40e5f47","type":"code","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["# create new overlay network called skynet, all container registered to this node can communicate with each other\ndocker network create -d overlay skynet"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/3d2f02155cf84472b56b517eba7e4e05","type":"heading","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Step 4: Deploy service"]],"depth":3},{"children":[],"uri":"https://www.notion.so/57cd8c68a3bf48d4bf1fbcd3f2b5a56c","type":"text","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["Services used to run containers across the cluster, it allows to define how applications deployed at scale."]]},{"children":[],"uri":"https://www.notion.so/539e9a6121a446bd8777441df7e48339","type":"code","createdTime":1629571366150,"lastEditedTime":1629571366150,"title":[["# to ensure availablity, we run two replicas\ndocker service create --name http --network skynet --replicas 2 -p 80:80 docker-http-service\n# view running service\ndocker service ls"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/58b9d4873f91433d88710e9b0edf95ce","type":"heading","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Step 5: Inspect State"]],"depth":3},{"children":[],"uri":"https://www.notion.so/1b64cee45e2f4a53ab2175eb297bfe02","type":"text","createdTime":1629571366148,"lastEditedTime":1629571366148,"title":[["Inspect health and state of cluster and running applications."]]},{"children":[],"uri":"https://www.notion.so/4295a001c3284982a9f7d47ef0d5d94d","type":"code","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["# view list of task with service across the cluster\ndocker service ps http\n# view details and config of service\ndocker service inspect --pretty http\n# on each node, self refers to manager node\ndocker node ps self"]],"language":"Bash","wrap":false},{"children":[],"uri":"https://www.notion.so/a8f8fe70cfe645708bce0af682dfbafc","type":"heading","createdTime":1629571366145,"lastEditedTime":1629571366145,"title":[["Step 6: Scale service"]],"depth":3},{"children":[],"uri":"https://www.notion.so/6d340b48291849ae8d80892fa94a6767","type":"text","createdTime":1629571366149,"lastEditedTime":1629571366149,"title":[["Service allows to scale many instances of running task across the cluster."]]},{"children":[],"uri":"https://www.notion.so/9fa42c62544546c3af754ef37c053347","type":"code","createdTime":1629571366144,"lastEditedTime":1629571366144,"title":[["# scale http service to running across five contianer\ndocker service scale http=5 "]],"language":"Bash","wrap":false}],"uri":"https://www.notion.so/879531ea1a5b4d91a73303bc04b54272","type":"page","createdTime":1629571366134,"lastEditedTime":1629571366134,"title":[["KataCoda : Docker Foundations"]],"icon":"⏱️","fullWidth":false,"coverPosition":1,"properties":{"!`\"w":[["Yes"]],"98uZ":[["Documenting Katacoda learnings"]],":H`m":[["Yes"]],"{iD?":[["Docker"]],"|Ay0":[["post"]]}}